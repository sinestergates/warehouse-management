#/usr/bin/python3



#import RPi.GPIO as GPIO
from tkinter import * #Tk, Label, Button, Frame, mainloop,messagebox
from threading import Thread
import time
import RPi.GPIO as GPIO
import psycopg2




def flash(light_pin):
    # times = time.monotonic() + 10
    # while time.monotonic() < times:"""
    for i in range(10):
        GPIO.setmode(GPIO.BCM)
        GPIO.setup(light_pin, GPIO.OUT)
        GPIO.output((light_pin), GPIO.HIGH)
        time.sleep(0.25)
        GPIO.output((light_pin), GPIO.LOW)
        time.sleep(0.25)
        GPIO.cleanup(light_pin)
    time.sleep(1)





abc = None
i = None
window = (1, 2, 3, 4, 5, 6, 7, 8)
list_pin=[[26,17,27,4],[22,19,13,19],[18,23,24,25],[12,16,20,21]]
#list_pin=[26,17,27,4,22,19,13,19,18,23,24,25,12,16,20,21]
arr_but=[]
but=[]
entr=[]
def b():
    con = psycopg2.connect(
        database="tydb",
        user="alex",
        password="123",
        host="192.168.0.108",
        port="5432"
    )
    print("подключение создано")
    qrcode = abc
    #print("Вы ввели код:%s", qrcode)
    cur = con.cursor()
    cur.execute(
        'SELECT public."OrderWindow".window_id FROM public."OrderWindow", public."OrdersDelivery" WHERE public."OrderWindow".order_id = public."OrdersDelivery".id AND public."OrdersDelivery".orderqr = %s',
        (qrcode,))
    a = cur.fetchall()
    get_window = a[0][0]
    #print(get_window)
    searh=get_window-1
    #print(searh)
    num_flash=list_pin[searh]
    print(num_flash)
    return flash(num_flash)
        
        
    
    


class App(Tk):
    def __init__(self):
        
        
        
        self.but_arr=[]
        self.pin_arr = [14, 15, 8, 7]
        
        super().__init__()
        def abc_in (i):
            
            global abc
            abc=Entr1.get()
            b()
            
            Entr1.delete(0,END)
            return
            
        self.label = Label(self, text="")
        self.label.pack()  # grid()

       
        
        Entr1 = Entry(self,width=50)
        Entr1.bind('<Return>',abc_in)
        Entr1.pack()
       

        def setting():
            entry_arr=[]
            self.root=Tk()
            self.root.geometry('800x400')
            def update_arr():
                #print(entr)
                for i in range(len(entr)):
                    b=entr[i]
                    for g in range(len(b)):
                        b=entr[i][g].get()
                        #f=list_pin[i][g]
                        if b == "":
                            pass
                        else:
                            del list_pin[i][g]
                            list_pin[i].insert(g,b)
                            break
                    print(list_pin)
                       
            
            def entry_greate():
            
                for i in range(len(list_pin)):
                    a=list_pin[i]
                    for g in  range(len(a)):
                        b=a[g]
                        #print(i,g)
                        ff=self.entry_i_g = Entry(self.root,width=10)
                        ff.place(x=100*(i+1.5),y=100*(g+0.5))
                        entry_arr.append(ff)
            
            entry_greate()
            entr = [entry_arr[i:i+4] for i in range(0, len(entry_arr), 4)]
            print(entr)
            self.button1 = Button(self.root, text='ВВОД', width=10, height=1, bg='green', fg='Black', font='arial14',command=update_arr)
                            
            self.button1.place(x=50,y=50)
            self.root.mainloop()       
        
        def but_greate():
            
            for i in range(len(list_pin)):
                a=list_pin[i]
                for g in  range(len(a)):
                    b=a[g]
                    ff=self.button_i= Button(self, text=f'{i+1}колонна\n{i+1}окно', width=10, height=3, bg='green', fg='Black', font='arial14',
                                command=lambda: flash(b))
                    ff.place(x=100*(i+1.5),y=100*(g+0.5))
                    arr_but.append(ff)
        but_greate()
        but = [arr_but[i:i+4] for i in range(0, len(arr_but), 4)]
        
        print(but)
        self.button1 = Button(self, text='Настройки', width=10, height=1, bg='green', fg='Black', font='arial14',command=setting)
                              
        self.button1.place(x=50,y=50)
        
        
    
    def check_doors(self):
        def thread():
            while True:

                for i in self.pin_arr:

                    GPIO.setmode(GPIO.BCM)
                    GPIO.setup(self.pin_arr, GPIO.IN)
                    if GPIO.input(i) == GPIO.HIGH:
                        but_color = "green"
                    if GPIO.input(i) == GPIO.LOW:
                        but_color = "red"

                    
                    if i == 14:
                        self.fra1['bg'] = but_color
                    if i == 15:
                        self.fra2['bg'] = but_color
                    if i == 8:
                        self.fra3['bg'] = but_color

                time.sleep(1)

        Thread(target=thread).start()


def main():
    app = App()
    app.geometry('800x400')
    app.mainloop()
    app.abc_in()


if __name__ == '__main__':
    try:
        main()
    except:
        pass





